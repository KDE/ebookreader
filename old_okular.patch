From b7a12c6fcd494d4c0d5c8fe6e8f0416b0fcd6148 Mon Sep 17 00:00:00 2001
From: Bogdan Cristea <cristeab@gmail.com>
Date: Sat, 1 Jun 2013 20:21:51 +0200
Subject: [PATCH] patch for old API

---
 src/observer.h         | 150 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/okular_export.h    |  33 +++++++++++
 src/okulardocument.cpp |   8 +--
 src/okulardocument.h   |   6 +-
 4 files changed, 192 insertions(+), 5 deletions(-)
 create mode 100644 src/observer.h
 create mode 100644 src/okular_export.h

diff --git a/src/observer.h b/src/observer.h
new file mode 100644
index 0000000..7db1fdc
--- /dev/null
+++ b/src/observer.h
@@ -0,0 +1,150 @@
+/***************************************************************************
+ *   Copyright (C) 2005 by Enrico Ros <eros.kde@email.it>                  *
+ *   Copyright (C) 2005 by Albert Astals Cid <aacid@kde.org>               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ ***************************************************************************/
+
+#ifndef _OKULAR_DOCUMENTOBSERVER_H_
+#define _OKULAR_DOCUMENTOBSERVER_H_
+
+#include <QtCore/QVector>
+
+#include "okular_export.h"
+
+namespace Okular {
+
+/** IDs for observers. Globally defined here. **/
+#define PRESENTATION_ID 1
+#define PART_ID 2
+#define PAGEVIEW_ID 3
+#define THUMBNAILS_ID 4
+#define TOC_ID 5
+#define MINIBAR_ID 6
+#define REVIEWS_ID 7
+#define PROGRESSWIDGET_ID 8
+#define PAGESIZELABEL_ID 9
+#define BOOKMARKLIST_ID 10
+#define ANNOTATIONMODEL_ID 11
+
+// the biggest id, useful for ignoring wrong id request
+#define MAX_OBSERVER_ID 12
+
+/** PRIORITIES for requests. Globally defined here. **/
+#define PAGEVIEW_PRIO 1
+#define PAGEVIEW_PRELOAD_PRIO 4
+#define THUMBNAILS_PRIO 2
+#define THUMBNAILS_PRELOAD_PRIO 5
+#define PRESENTATION_PRIO 0
+#define PRESENTATION_PRELOAD_PRIO 3
+
+class Page;
+
+/**
+ * @short Base class for objects being notified when something changes.
+ *
+ * Inherit this class and call Document->addObserver( yourClass ) to get
+ * notified of asynchronous events (new pixmap generated, or changed, etc..).
+ */
+class OKULAR_EXPORT DocumentObserver
+{
+    public:
+        DocumentObserver();
+        /**
+         * Destroys the document observer.
+         */
+        virtual ~DocumentObserver();
+
+        /**
+         * Must return an unique ID for each observer (used for notifications).
+         */
+        virtual uint observerId() const = 0;
+
+        /**
+         * Flags that can be sent from the document to all observers to
+         * inform them about the type of object that has been changed.
+         */
+        enum ChangedFlags {
+            Pixmap = 1,           ///< Pixmaps has been changed
+            Bookmark = 2,         ///< Bookmarks has been changed
+            Highlights = 4,       ///< Highlighting information has been changed
+            TextSelection = 8,    ///< Text selection has been changed
+            Annotations = 16,     ///< Annotations have been changed
+            BoundingBox = 32,     ///< Bounding boxes have been changed
+            NeedSaveAs = 64       ///< Set along with Annotations when Save As is needed or annotation changes will be lost @since 0.15 (KDE 4.9)
+        };
+
+        /**
+         * ...
+         */
+        enum SetupFlags {
+            DocumentChanged = 1,    ///< The document is a new document.
+            NewLayoutForPages = 2   ///< All the pages have
+        };
+
+        /**
+         * This method is called whenever the document is initialized or reconstructed.
+         *
+         * @param pages The vector of pages of the document.
+         * @param setupFlags the flags with the information about the setup
+         */
+        virtual void notifySetup( const QVector< Okular::Page * > &pages, int setupFlags );
+
+        /**
+         * This method is called whenever the viewport has been changed.
+         *
+         * @param smoothMove If true, the move shall be animated.
+         */
+        virtual void notifyViewportChanged( bool smoothMove );
+
+        /**
+         * This method is called whenever the content on @p page described by the
+         * passed @p flags has been changed.
+         */
+        virtual void notifyPageChanged( int page, int flags );
+
+        /**
+         * This method is called whenever the content described by the passed @p flags
+         * has been cleared.
+         */
+        virtual void notifyContentsCleared( int flags );
+
+        /**
+         * This method is called whenever the visible rects have been changed.
+         */
+        virtual void notifyVisibleRectsChanged();
+
+        /**
+         * This method is called whenever the zoom of the document has been changed.
+         */
+        virtual void notifyZoom( int factor );
+
+        /**
+         * Returns whether the observer agrees that all pixmaps for the given
+         * @p page can be unloaded to improve memory usage.
+         *
+         * Returns true per default.
+         */
+        virtual bool canUnloadPixmap( int page ) const;
+
+        /**
+         * This method is called after the current page of the document has been entered.
+         *
+         * @param previous The number of the previous page (is @c -1 for the initial page change).
+         * @param current The number of the current page.
+         *
+         * @since 0.16 (KDE 4.10)
+         */
+        virtual void notifyCurrentPageChanged( int previous, int current );
+
+    private:
+        class Private;
+        const Private* d;
+};
+
+}
+
+#endif
diff --git a/src/okular_export.h b/src/okular_export.h
new file mode 100644
index 0000000..d517915
--- /dev/null
+++ b/src/okular_export.h
@@ -0,0 +1,33 @@
+/***************************************************************************
+ *   Copyright (C) 2006      by Pino Toscano <toscano.pino@tiscali.it>     *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ ***************************************************************************/
+
+#ifndef OKULAR_EXPORT_H
+#define OKULAR_EXPORT_H
+
+/* needed for KDE_EXPORT macros */
+#include <kdemacros.h>
+
+
+#if defined _WIN32 || defined _WIN64
+#ifndef OKULAR_EXPORT
+# ifdef MAKE_OKULARCORE_LIB
+#  define OKULAR_EXPORT KDE_EXPORT
+# else
+#  define OKULAR_EXPORT KDE_IMPORT
+# endif
+#endif
+
+#else /* UNIX*/
+
+
+/* export statements for unix */
+#define OKULAR_EXPORT KDE_EXPORT
+#endif
+
+#endif
diff --git a/src/okulardocument.cpp b/src/okulardocument.cpp
index 1908552..d9af30c 100644
--- a/src/okulardocument.cpp
+++ b/src/okulardocument.cpp
@@ -39,9 +39,9 @@ public:
   void sendRequest(const Okular::Page *page, int width, int height)
   {
     qDebug() << "PagePainter::sendRequest";
-    if(false == page->hasPixmap(obs_)) {
+    if(false == page->hasPixmap(OkularDocument::OKULAR_OBSERVER_ID)) {
       qDebug() << "making pixmap request";
-    Okular::PixmapRequest *pixmapRequest = new Okular::PixmapRequest(obs_, page->number(), width, height, 0, Okular::PixmapRequest::Asynchronous);//the request is deleted by okular core library
+    Okular::PixmapRequest *pixmapRequest = new Okular::PixmapRequest(OkularDocument::OKULAR_OBSERVER_ID, page->number(), width, height, 0, true);//asynchronous request (the request is deleted by okular core library)
       req_.clear();
       req_.push_back(pixmapRequest);
       doc_->requestPixmaps(req_);
@@ -55,7 +55,7 @@ public:
     if (NULL != doc_) {
       const Okular::Page *p = doc_->page(page);
       if (NULL != p) {
-        pix = p->_o_nearestPixmap(obs_, -1, -1);
+        pix = p->_o_nearestPixmap(OkularDocument::OKULAR_OBSERVER_ID, -1, -1);
       }
     }
     return pix;
@@ -186,7 +186,7 @@ void OkularDocument::notifyPageChanged(int page, int flags)
       //delete immediatelly internal pixmap
       Okular::Page *p = const_cast<Okular::Page*>(doc_->page(page));
       if (NULL != p) {
-        p->deletePixmap(this);
+        p->deletePixmap(OKULAR_OBSERVER_ID);
       }
       emit pixmapReady(page, pix);
     }
diff --git a/src/okulardocument.h b/src/okulardocument.h
index cf8293d..2f19b00 100644
--- a/src/okulardocument.h
+++ b/src/okulardocument.h
@@ -22,7 +22,7 @@
 #include <QPixmap>
 #include <kmimetype.h>
 #include <core/document.h>
-#include <core/observer.h>
+#include "observer.h"
 
 namespace Okular
 {
@@ -55,6 +55,10 @@ public:
     winWidth_ = width;
   }
   ~OkularDocument();
+  enum {OKULAR_OBSERVER_ID = 6};
+  uint observerId() const {
+    return OKULAR_OBSERVER_ID;
+  }
   void notifyPageChanged(int page, int flags);
   const QStringList& supportedFilePatterns();
 private:
-- 
1.8.1.4

